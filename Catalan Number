In combinatorial mathematics, the Catalan numbers are a sequence of natural numbers that occur in various counting problems,often involving recursively defined objects.
Catalan numbers are a mathematical sequence that consists of positive integers, which can be used to find the number of possibilities of various combinations.
The first Catalan numbers for n = 0, 1, 2, 3, ... are

1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, ... (sequence A000108 in the OEIS).

 Cn=(2n)! / ((n + 1)!n!)
 
 #code
# def factorial(n):
#     if n==0:
#         return 1
#     return n*factorial(n-1)
# def catalan_series(n):
#     series=[]
#     for i in range(0,n):
#         series.append(factorial(i*2)//((factorial(i+1)*factorial(i))))
#     return series
# n=int(input())
# print(catalan_series(n))


 Applications:
 
 1. Cn is the number of Dyck words[2] of length 2n. A Dyck word is a string consisting of n X's and n Y's such that no initial segment of the string has more Y's than X's. For example, the following are the Dyck words of length 6:
    XXXYYY     XYXXYY     XYXYXY     XXYYXY     XXYXYY.
 2. Count the number of expressions containing n pairs of parentheses which are correctly matched. For n = 3, possible expressions are ((())), ()(()), ()()(), (())(), (()()).
 3. Count the number of possible Binary Search Trees with n keys
 4. Count the number of full binary trees (A rooted binary tree is full if every vertex has either two children or no children) with n+1 leaves.
 5. Given a number n, return the number of ways you can draw n chords in a circle with 2 x n points such that no 2 chords intersect
 6. Number of ways a convex polygon of n+2 sides can split into triangles by connecting vertices.
 7. Find the number of permutations in the set of integers between one and nine {1, 2, 3, 4, 5, 6, 7, 8, 9}, wherein none of the permutations include three consecutive integers.
 

Count the number of possible Binary Search Trees can be formed using with n keys
#code
 def uniquebst(n):
    n1,n2,sum=0,0,0
    #base case
    if n==1 or n==0:
        return 1
    for i in range(1,n+1):
        n1=uniquebst(i-1)
        n2=uniquebst(n-i)
        sum+=n1*n2
    return sum
  
